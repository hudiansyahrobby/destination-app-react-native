openapi: 3.0.0

info:
  title: "Microservices API"
  description: "API for Microservices"
  version: "1.0.0"
servers:
  - url: http://localhost:8087/api/v1
paths:
  /auth/google-login:
    post:
      description: "Login with facebook"
      tags:
        - "Authentication"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: "User successfully login"


  /auth/firebase-register:
    post:
      description: "Register with email"
      tags:
        - "Authentication"
      requestBody:
        # required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithEmail'
      responses:
        '201':
          description: User successfully registered
        '422':
          description: Validation error
        '500':
          description: Server Error
  /auth/firebase-login:
    post:
      description: "Login with Email"
      tags:
        - "Authentication"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "antoni@gmail.com"
                password:
                  type: string
                  example: "Testing12,."
      responses:
        '200':
          description: Login successfully
  /auth/facebook-login:
    post:
      description: "Login with facebook"
      tags:
        - "Authentication"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      responses:
        '200':
          description: User successfully login
  /auth/refresh-token:
    post:
      description: "Revoke Refresh Token"
      tags:
        - "Authentication"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  type: string
                  example: "aduwudhuwhduw"
      responses:
        '200':
          description: Refresh token revoked successfully
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      responses:
        '200':
          description: Signout successfully
  /auth/check-auth:
    post:
      tags:
        - Authentication
      summary: Check Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User authenticated
        '403':
          description: Forbidden
  /auth/check-admin:
    post:
      tags:
        - Authentication
      summary: Check If The Authenticated User Is Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User Is Admin
        '403':
          description: Forbidden 
  /auth/users:
    get:
      summary: Get All Users
      description: "Get All Users"
      tags:
        - "Authentication"
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"
    put:
      summary: Update User By UID
      description: "Update User By UID"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  type: string
                  example: "aduwudhuwhduw"
                displayName: 
                  type: string
                  example: "Rodrigo"
      tags:
        - "Authentication"
      responses:
        200:
          description: "OK"
        500:
          description: "Server Error"
  /auth/users/{uid}:
    get:
      summary: Get User By UID
      description: "Get User By UID"
      tags:
        - "Authentication"
      parameters:
      - in: path
        required: true
        name: uid
        schema:
          type: string
        description: Get User By UID  
      responses:
        200:
          description: "OK"
        404:
          description: "User not found"
        500:
          description: "Server Error"
  /auth/users/search/{keyword}:
    post:
      summary: Find User By Facebook ID, Name, Phone Number, and Email
      description: "Find User By Facebook ID, Name, Phone Number, and Email"
      tags:
        - "Authentication"
      parameters:
      - in: path
        required: true
        name: keyword
        schema:
          type: string
        description: Find User By Facebook ID, Name, Phone Number, and Email  
      responses:
        200:
          description: "OK"
        404:
          description: "User not found"
        500:
          description: "Server Error"
components:
  schemas:
    UserWithUsername:
      type: object
      properties:
        displayName:
          type: string
          description: only contain alphapet or space
          pattern: '/^[a-zA-Z ]*$/'
          example: 'antoni'
        username:
          type: string
          example: "antoni"
        password:
          type: string
          minimum: 8
          description: password must be at least one uppercase letter, one lowercase letter,
            one number and one special character
          example: "Testing12,."
        passwordConfirmation:
          type: string
          example: "Testing12,."
    UserWithEmail:
      type: object
      properties:
        displayName:
          type: string
          description: only contain alphapet or space
          pattern: '/^[a-zA-Z ]*$/'
          example: 'antoni'
        email:
          type: string
          example: "antoni@gmail.com"
        password:
          type: string
          minimum: 8
          description: >-
            password must be at least one uppercase letter, one lowercase letter,
            one number and one special character
          example: "Testing12,."
        passwordConfirmation:
          type: string
          example: "Testing12,."
    Token:
      type: object
      properties:
        token:
          type: string
          example: "aduwudhuwhduw"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT